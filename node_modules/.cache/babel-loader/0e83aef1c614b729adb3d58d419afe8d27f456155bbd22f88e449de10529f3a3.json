{"ast":null,"code":"import { saveAs } from \"file-saver\"; // Correct TypeScript import for file-saver\n\n/**\r\n * Converts a file from a given URL to a Base64-encoded string.\r\n * @param url - The URL of the file to convert.\r\n * @returns A promise that resolves to the Base64-encoded string.\r\n */\nexport function convertFileToBase64(url) {\n  return fetch(url).then(response => {\n    if (!response.ok) {\n      throw new Error(\"File not found\");\n    }\n    return response.blob(); // Get the file as a Blob\n  }).then(blob => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        // Convert the Blob to Base64\n        const base64String = reader.result;\n        resolve(base64String);\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(blob); // Read the Blob as a Base64 string\n    });\n  }).catch(error => {\n    console.error(\"Error converting file to Base64:\", error);\n    throw error;\n  });\n}\n\n/**\r\n * Downloads a file from a Base64-encoded string.\r\n * @param EXCEL_FILE_BASE64 - The Base64-encoded file content.\r\n * @param fileName - The name of the file to save.\r\n */\nexport function downloadBase64File(EXCEL_FILE_BASE64, fileName) {\n  const sliceSize = 1024;\n  console.log(EXCEL_FILE_BASE64);\n  const byteCharacters = atob(EXCEL_FILE_BASE64.split(\",\")[1]); // Remove the data URL prefix\n  const bytesLength = byteCharacters.length;\n  const slicesCount = Math.ceil(bytesLength / sliceSize);\n  const byteArrays = new Array(slicesCount);\n  for (let sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n    const begin = sliceIndex * sliceSize;\n    const end = Math.min(begin + sliceSize, bytesLength);\n    const bytes = new Array(end - begin);\n    for (let offset = begin, i = 0; offset < end; ++i, ++offset) {\n      bytes[i] = byteCharacters[offset].charCodeAt(0);\n    }\n    byteArrays[sliceIndex] = new Uint8Array(bytes);\n  }\n\n  // Use FileSaver.js to trigger the file download\n  const blob = new Blob(byteArrays, {\n    type: \"application/vnd.ms-excel.sheet.macroEnabled.12\"\n  });\n  saveAs(blob, `${fileName}.xlsm`); // Save the file with .xlsm extension\n}","map":{"version":3,"names":["saveAs","convertFileToBase64","url","fetch","then","response","ok","Error","blob","Promise","resolve","reject","reader","FileReader","onloadend","base64String","result","onerror","readAsDataURL","catch","error","console","downloadBase64File","EXCEL_FILE_BASE64","fileName","sliceSize","log","byteCharacters","atob","split","bytesLength","length","slicesCount","Math","ceil","byteArrays","Array","sliceIndex","begin","end","min","bytes","offset","i","charCodeAt","Uint8Array","Blob","type"],"sources":["C:/Users/landa/Documents/עבודה/ExcelStartup/website/web2/src/utils.ts"],"sourcesContent":["import { saveAs } from \"file-saver\"; // Correct TypeScript import for file-saver\r\n\r\n/**\r\n * Converts a file from a given URL to a Base64-encoded string.\r\n * @param url - The URL of the file to convert.\r\n * @returns A promise that resolves to the Base64-encoded string.\r\n */\r\nexport function convertFileToBase64(url: string): Promise<string> {\r\n  return fetch(url)\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        throw new Error(\"File not found\");\r\n      }\r\n      return response.blob(); // Get the file as a Blob\r\n    })\r\n    .then((blob) => {\r\n      return new Promise<string>((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          // Convert the Blob to Base64\r\n          const base64String = reader.result as string;\r\n          resolve(base64String);\r\n        };\r\n        reader.onerror = reject;\r\n        reader.readAsDataURL(blob); // Read the Blob as a Base64 string\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error converting file to Base64:\", error);\r\n      throw error;\r\n    });\r\n}\r\n\r\n/**\r\n * Downloads a file from a Base64-encoded string.\r\n * @param EXCEL_FILE_BASE64 - The Base64-encoded file content.\r\n * @param fileName - The name of the file to save.\r\n */\r\nexport function downloadBase64File(EXCEL_FILE_BASE64: string, fileName: string): void {\r\n  const sliceSize = 1024;\r\n  console.log(EXCEL_FILE_BASE64)\r\n  const byteCharacters = atob(EXCEL_FILE_BASE64.split(\",\")[1]); // Remove the data URL prefix\r\n  const bytesLength = byteCharacters.length;\r\n  const slicesCount = Math.ceil(bytesLength / sliceSize);\r\n  const byteArrays = new Array(slicesCount);\r\n\r\n  for (let sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\r\n    const begin = sliceIndex * sliceSize;\r\n    const end = Math.min(begin + sliceSize, bytesLength);\r\n    const bytes = new Array(end - begin);\r\n\r\n    for (let offset = begin, i = 0; offset < end; ++i, ++offset) {\r\n      bytes[i] = byteCharacters[offset].charCodeAt(0);\r\n    }\r\n\r\n    byteArrays[sliceIndex] = new Uint8Array(bytes);\r\n  }\r\n\r\n  // Use FileSaver.js to trigger the file download\r\n  const blob = new Blob(byteArrays, { type: \"application/vnd.ms-excel.sheet.macroEnabled.12\" });\r\n  saveAs(blob, `${fileName}.xlsm`); // Save the file with .xlsm extension\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,YAAY,CAAC,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAACC,GAAW,EAAmB;EAChE,OAAOC,KAAK,CAACD,GAAG,CAAC,CACdE,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;IACnC;IACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1B,CAAC,CAAC,CACDJ,IAAI,CAAEI,IAAI,IAAK;IACd,OAAO,IAAIC,OAAO,CAAS,CAACC,OAAO,EAAEC,MAAM,KAAK;MAC9C,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,SAAS,GAAG,MAAM;QACvB;QACA,MAAMC,YAAY,GAAGH,MAAM,CAACI,MAAgB;QAC5CN,OAAO,CAACK,YAAY,CAAC;MACvB,CAAC;MACDH,MAAM,CAACK,OAAO,GAAGN,MAAM;MACvBC,MAAM,CAACM,aAAa,CAACV,IAAI,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC;EACJ,CAAC,CAAC,CACDW,KAAK,CAAEC,KAAK,IAAK;IAChBC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,kBAAkBA,CAACC,iBAAyB,EAAEC,QAAgB,EAAQ;EACpF,MAAMC,SAAS,GAAG,IAAI;EACtBJ,OAAO,CAACK,GAAG,CAACH,iBAAiB,CAAC;EAC9B,MAAMI,cAAc,GAAGC,IAAI,CAACL,iBAAiB,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9D,MAAMC,WAAW,GAAGH,cAAc,CAACI,MAAM;EACzC,MAAMC,WAAW,GAAGC,IAAI,CAACC,IAAI,CAACJ,WAAW,GAAGL,SAAS,CAAC;EACtD,MAAMU,UAAU,GAAG,IAAIC,KAAK,CAACJ,WAAW,CAAC;EAEzC,KAAK,IAAIK,UAAU,GAAG,CAAC,EAAEA,UAAU,GAAGL,WAAW,EAAE,EAAEK,UAAU,EAAE;IAC/D,MAAMC,KAAK,GAAGD,UAAU,GAAGZ,SAAS;IACpC,MAAMc,GAAG,GAAGN,IAAI,CAACO,GAAG,CAACF,KAAK,GAAGb,SAAS,EAAEK,WAAW,CAAC;IACpD,MAAMW,KAAK,GAAG,IAAIL,KAAK,CAACG,GAAG,GAAGD,KAAK,CAAC;IAEpC,KAAK,IAAII,MAAM,GAAGJ,KAAK,EAAEK,CAAC,GAAG,CAAC,EAAED,MAAM,GAAGH,GAAG,EAAE,EAAEI,CAAC,EAAE,EAAED,MAAM,EAAE;MAC3DD,KAAK,CAACE,CAAC,CAAC,GAAGhB,cAAc,CAACe,MAAM,CAAC,CAACE,UAAU,CAAC,CAAC,CAAC;IACjD;IAEAT,UAAU,CAACE,UAAU,CAAC,GAAG,IAAIQ,UAAU,CAACJ,KAAK,CAAC;EAChD;;EAEA;EACA,MAAMjC,IAAI,GAAG,IAAIsC,IAAI,CAACX,UAAU,EAAE;IAAEY,IAAI,EAAE;EAAiD,CAAC,CAAC;EAC7F/C,MAAM,CAACQ,IAAI,EAAG,GAAEgB,QAAS,OAAM,CAAC,CAAC,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}