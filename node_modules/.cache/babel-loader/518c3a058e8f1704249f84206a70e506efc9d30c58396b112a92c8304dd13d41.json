{"ast":null,"code":"import { getSession, isValidToken, removeSession } from \"../auth/auth.utils\";\nimport { ENDPOINTS } from \"../api/endpoints\";\nexport const authRequestMiddleware = async request => {\n  var _request$url, _request$url2, _request$url3, _request$url4;\n  const user = await getSession();\n  alert(request.url);\n  alert((_request$url = request.url) === null || _request$url === void 0 ? void 0 : _request$url.substring(0, (_request$url2 = request.url) === null || _request$url2 === void 0 ? void 0 : _request$url2.lastIndexOf(\"/\")));\n  if (request.url !== ENDPOINTS.addUser && request.url !== ENDPOINTS.getTracksByArea && ((_request$url3 = request.url) === null || _request$url3 === void 0 ? void 0 : _request$url3.substring(0, (_request$url4 = request.url) === null || _request$url4 === void 0 ? void 0 : _request$url4.lastIndexOf(\"/\"))) !== ENDPOINTS.getTracksByText && request.url !== ENDPOINTS.getAllTracks) {\n    if (!user || !isValidToken(user.token)) {\n      removeSession();\n      Promise.reject('Unauthorized');\n    }\n  }\n  return request;\n};\nexport const authResponseMiddleware = response => {\n  if (response.status === 401) {\n    alert(\"response\");\n    removeSession();\n    Promise.reject('Unauthorized');\n  }\n  return response;\n};","map":{"version":3,"names":["getSession","isValidToken","removeSession","ENDPOINTS","authRequestMiddleware","request","_request$url","_request$url2","_request$url3","_request$url4","user","alert","url","substring","lastIndexOf","addUser","getTracksByArea","getTracksByText","getAllTracks","token","Promise","reject","authResponseMiddleware","response","status"],"sources":["C:/Users/landa/Documents/לימודים/תכנות יד/react/my-final-project/src/utils/authMiddleware.ts"],"sourcesContent":["import { InternalAxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { getSession, isValidToken, removeSession } from \"../auth/auth.utils\"\r\nimport { ENDPOINTS, baseUrl } from \"../api/endpoints\";\r\n\r\nexport const authRequestMiddleware = async (request: InternalAxiosRequestConfig) => {\r\n    const user = await getSession()\r\n    alert(request.url)\r\n    alert(request.url?.substring(0,request.url?.lastIndexOf(\"/\")))\r\n    if (request.url !== ENDPOINTS.addUser&&request.url!==ENDPOINTS.getTracksByArea&&request.url?.substring(0,request.url?.lastIndexOf(\"/\"))!==ENDPOINTS.getTracksByText&&request.url!==ENDPOINTS.getAllTracks) {\r\n        if (!user || !isValidToken(user.token)) {\r\n            removeSession();\r\n            Promise.reject('Unauthorized')\r\n        }\r\n    }\r\n    return request\r\n}\r\n\r\nexport const authResponseMiddleware = (response: AxiosResponse) => {\r\n    if (response.status === 401) {\r\n        alert(\"response\")\r\n        removeSession();\r\n        Promise.reject('Unauthorized')\r\n    }\r\n    return response\r\n}"],"mappings":"AACA,SAASA,UAAU,EAAEC,YAAY,EAAEC,aAAa,QAAQ,oBAAoB;AAC5E,SAASC,SAAS,QAAiB,kBAAkB;AAErD,OAAO,MAAMC,qBAAqB,GAAG,MAAOC,OAAmC,IAAK;EAAA,IAAAC,YAAA,EAAAC,aAAA,EAAAC,aAAA,EAAAC,aAAA;EAChF,MAAMC,IAAI,GAAG,MAAMV,UAAU,CAAC,CAAC;EAC/BW,KAAK,CAACN,OAAO,CAACO,GAAG,CAAC;EAClBD,KAAK,EAAAL,YAAA,GAACD,OAAO,CAACO,GAAG,cAAAN,YAAA,uBAAXA,YAAA,CAAaO,SAAS,CAAC,CAAC,GAAAN,aAAA,GAACF,OAAO,CAACO,GAAG,cAAAL,aAAA,uBAAXA,aAAA,CAAaO,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;EAC9D,IAAIT,OAAO,CAACO,GAAG,KAAKT,SAAS,CAACY,OAAO,IAAEV,OAAO,CAACO,GAAG,KAAGT,SAAS,CAACa,eAAe,IAAE,EAAAR,aAAA,GAAAH,OAAO,CAACO,GAAG,cAAAJ,aAAA,uBAAXA,aAAA,CAAaK,SAAS,CAAC,CAAC,GAAAJ,aAAA,GAACJ,OAAO,CAACO,GAAG,cAAAH,aAAA,uBAAXA,aAAA,CAAaK,WAAW,CAAC,GAAG,CAAC,CAAC,MAAGX,SAAS,CAACc,eAAe,IAAEZ,OAAO,CAACO,GAAG,KAAGT,SAAS,CAACe,YAAY,EAAE;IACvM,IAAI,CAACR,IAAI,IAAI,CAACT,YAAY,CAACS,IAAI,CAACS,KAAK,CAAC,EAAE;MACpCjB,aAAa,CAAC,CAAC;MACfkB,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC;IAClC;EACJ;EACA,OAAOhB,OAAO;AAClB,CAAC;AAED,OAAO,MAAMiB,sBAAsB,GAAIC,QAAuB,IAAK;EAC/D,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACzBb,KAAK,CAAC,UAAU,CAAC;IACjBT,aAAa,CAAC,CAAC;IACfkB,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC;EAClC;EACA,OAAOE,QAAQ;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}