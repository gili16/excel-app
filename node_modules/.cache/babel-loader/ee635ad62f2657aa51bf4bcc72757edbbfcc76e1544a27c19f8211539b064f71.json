{"ast":null,"code":"import { saveAs } from \"file-saver\"; // Correct TypeScript import for file-saver\n\n/**\r\n * Converts a file from a given URL to a Base64-encoded string.\r\n * @param url - The URL of the file to convert.\r\n * @returns A promise that resolves to the Base64-encoded string.\r\n */\n\nexport async function fileToBase64(fileUrl) {\n  try {\n    // Check if the file extension is .xlsm\n    if (!fileUrl.toLowerCase().endsWith('.xlsm')) {\n      throw new Error('File is not an .xlsm file');\n    }\n\n    // Fetch the .xlsm file as binary data\n    const response = await fetch(fileUrl, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/octet-stream' // Ensuring we fetch the binary content\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch the file');\n    }\n\n    // Get the file content as ArrayBuffer (binary data)\n    const arrayBuffer = await response.arrayBuffer();\n\n    // Convert the ArrayBuffer to base64\n    const base64 = arrayBufferToBase64(arrayBuffer);\n    return base64;\n  } catch (error) {\n    console.error('Error converting file to base64:', error);\n    throw error;\n  }\n}\n\n// Helper function to convert ArrayBuffer to base64\nfunction arrayBufferToBase64(arrayBuffer) {\n  const uint8Array = new Uint8Array(arrayBuffer);\n  let binary = '';\n  uint8Array.forEach(byte => binary += String.fromCharCode(byte));\n  return btoa(binary); // Converts binary data to base64\n}\n// Usage\n\n/**\r\n * Downloads a file from a Base64-encoded string.\r\n * @param EXCEL_FILE_BASE64 - The Base64-encoded file content.\r\n * @param fileName - The name of the file to save.\r\n */\nexport function downloadBase64File(EXCEL_FILE_BASE64, fileName) {\n  const sliceSize = 1024;\n  console.log(EXCEL_FILE_BASE64);\n  const byteCharacters = atob(EXCEL_FILE_BASE64.split(\",\")[1]); // Remove the data URL prefix\n  const bytesLength = byteCharacters.length;\n  const slicesCount = Math.ceil(bytesLength / sliceSize);\n  const byteArrays = new Array(slicesCount);\n  for (let sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n    const begin = sliceIndex * sliceSize;\n    const end = Math.min(begin + sliceSize, bytesLength);\n    const bytes = new Array(end - begin);\n    for (let offset = begin, i = 0; offset < end; ++i, ++offset) {\n      bytes[i] = byteCharacters[offset].charCodeAt(0);\n    }\n    byteArrays[sliceIndex] = new Uint8Array(bytes);\n  }\n\n  // Use FileSaver.js to trigger the file download\n  const blob = new Blob(byteArrays, {\n    type: \"application/vnd.ms-excel.sheet.macroEnabled.12\"\n  });\n  saveAs(blob, `${fileName}.xlsm`); // Save the file with .xlsm extension\n}","map":{"version":3,"names":["saveAs","fileToBase64","fileUrl","toLowerCase","endsWith","Error","response","fetch","method","headers","ok","arrayBuffer","base64","arrayBufferToBase64","error","console","uint8Array","Uint8Array","binary","forEach","byte","String","fromCharCode","btoa","downloadBase64File","EXCEL_FILE_BASE64","fileName","sliceSize","log","byteCharacters","atob","split","bytesLength","length","slicesCount","Math","ceil","byteArrays","Array","sliceIndex","begin","end","min","bytes","offset","i","charCodeAt","blob","Blob","type"],"sources":["C:/Users/landa/Documents/עבודה/ExcelStartup/website/web2/src/utils.ts"],"sourcesContent":["import { saveAs } from \"file-saver\"; // Correct TypeScript import for file-saver\r\n\r\n/**\r\n * Converts a file from a given URL to a Base64-encoded string.\r\n * @param url - The URL of the file to convert.\r\n * @returns A promise that resolves to the Base64-encoded string.\r\n */\r\nimport * as fs from 'fs';\r\n\r\n\r\nexport async function fileToBase64(fileUrl: string): Promise<string> {\r\n  try {\r\n    // Check if the file extension is .xlsm\r\n    if (!fileUrl.toLowerCase().endsWith('.xlsm')) {\r\n      throw new Error('File is not an .xlsm file');\r\n    }\r\n\r\n    // Fetch the .xlsm file as binary data\r\n    const response = await fetch(fileUrl, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/octet-stream', // Ensuring we fetch the binary content\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch the file');\r\n    }\r\n\r\n    // Get the file content as ArrayBuffer (binary data)\r\n    const arrayBuffer = await response.arrayBuffer();\r\n\r\n    // Convert the ArrayBuffer to base64\r\n    const base64 = arrayBufferToBase64(arrayBuffer);\r\n\r\n    return base64;\r\n  } catch (error) {\r\n    console.error('Error converting file to base64:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n// Helper function to convert ArrayBuffer to base64\r\nfunction arrayBufferToBase64(arrayBuffer: ArrayBuffer): string {\r\n  const uint8Array = new Uint8Array(arrayBuffer);\r\n  let binary = '';\r\n  uint8Array.forEach(byte => binary += String.fromCharCode(byte));\r\n  return btoa(binary); // Converts binary data to base64\r\n}\r\n// Usage\r\n\r\n\r\n/**\r\n * Downloads a file from a Base64-encoded string.\r\n * @param EXCEL_FILE_BASE64 - The Base64-encoded file content.\r\n * @param fileName - The name of the file to save.\r\n */\r\nexport function downloadBase64File(EXCEL_FILE_BASE64: string, fileName: string): void {\r\n  const sliceSize = 1024;\r\n  console.log(EXCEL_FILE_BASE64)\r\n  const byteCharacters = atob(EXCEL_FILE_BASE64.split(\",\")[1]); // Remove the data URL prefix\r\n  const bytesLength = byteCharacters.length;\r\n  const slicesCount = Math.ceil(bytesLength / sliceSize);\r\n  const byteArrays = new Array(slicesCount);\r\n\r\n  for (let sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\r\n    const begin = sliceIndex * sliceSize;\r\n    const end = Math.min(begin + sliceSize, bytesLength);\r\n    const bytes = new Array(end - begin);\r\n\r\n    for (let offset = begin, i = 0; offset < end; ++i, ++offset) {\r\n      bytes[i] = byteCharacters[offset].charCodeAt(0);\r\n    }\r\n\r\n    byteArrays[sliceIndex] = new Uint8Array(bytes);\r\n  }\r\n\r\n  // Use FileSaver.js to trigger the file download\r\n  const blob = new Blob(byteArrays, { type: \"application/vnd.ms-excel.sheet.macroEnabled.12\" });\r\n  saveAs(blob, `${fileName}.xlsm`); // Save the file with .xlsm extension\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}