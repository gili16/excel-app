{"ast":null,"code":"import { addTrack as addTrackApi } from \"../../services/track\";\nimport { addTrack as addTrackAction, addStop as addStopAction, addComment as addCommentAction } from \"./track.slice\";\nimport { Login } from \"../user/user.thunk\";\nimport { addStop as addStopApi } from \"../../services/stop\";\nimport { addComment as addCommentApi, getCommentsByTrackId } from \"../../services/comment\";\nexport const addTrack = (track, token) => async (dispatch, getState) => {\n  // const state = getState()// אם רוצים לקבל מידע מהרידקס כדי לשלוח לקריאת שרת\n  try {\n    let response = await addTrackApi(track, token);\n    if (response.status === 401) {\n      const state = getState();\n      Login(state.user.user.mail);\n      response = await addTrackApi(track, localStorage.getItem('user'));\n    }\n    const newTrack = response.data;\n    dispatch(addTrackAction(newTrack));\n    return newTrack;\n  } catch (error) {\n    alert(\"failed to add\");\n    return null;\n  }\n};\nexport const addStop = (stop, token) => async (dispatch, getState) => {\n  // const state = getState()// אם רוצים לקבל מידע מהרידקס כדי לשלוח לקריאת שרת\n  try {\n    let response = await addStopApi(stop, token);\n    if (response.status === 401) {\n      const state = getState();\n      Login(state.user.user.mail);\n      response = await addStopApi(stop, localStorage.getItem('user'));\n    }\n    const newStop = response.data;\n    dispatch(addStopAction(newStop));\n    return newStop;\n  } catch (error) {\n    alert(\"failed to add\");\n    return null;\n  }\n};\nexport const addComment = (comment, token) => async (dispatch, getState) => {\n  let response = await addCommentApi(comment, token);\n  dispatch(addCommentAction({\n    trackId: response.trackId,\n    comment: response\n  }));\n  return response;\n};\nexport const initComments = (trackId, token) => async (dispatch, getState) => {\n  let response = await getCommentsByTrackId(trackId, token);\n  response.forEach(value => {\n    dispatch(addCommentAction({\n      trackId: trackId,\n      comment: value\n    }));\n  });\n  return response;\n};\nexport const deleteTrack = (trackId, token) => async (dispatch, getState) => {\n  await deleteTrack(trackId, token);\n  alert(\"delete was successfull\");\n  dispatch(DeleteTrackSlice(indexToDelete));\n};","map":{"version":3,"names":["addTrack","addTrackApi","addTrackAction","addStop","addStopAction","addComment","addCommentAction","Login","addStopApi","addCommentApi","getCommentsByTrackId","track","token","dispatch","getState","response","status","state","user","mail","localStorage","getItem","newTrack","data","error","alert","stop","newStop","comment","trackId","initComments","forEach","value","deleteTrack","DeleteTrackSlice","indexToDelete"],"sources":["C:/Users/landa/Documents/לימודים/תכנות יד/react/my-final-project/src/redux/track/track.thunk.ts"],"sourcesContent":["import { User } from \"../../types/user.types\";\r\nimport { Track } from \"../../types/Track\";\r\nimport { AppThunk } from \"../store\";\r\nimport { addTrack as addTrackApi } from \"../../services/track\";\r\nimport { addTrack as addTrackAction, addStop as addStopAction, addComment as addCommentAction } from \"./track.slice\";\r\nimport { Login } from \"../user/user.thunk\";\r\nimport { Stop } from \"../../types/Stop\";\r\nimport { addStop as addStopApi } from \"../../services/stop\";\r\nimport { Comment } from \"../../types/Comment\";\r\nimport { addComment as addCommentApi , getCommentsByTrackId} from \"../../services/comment\";\r\nexport const addTrack = (track: FormData,token:string): AppThunk<Track> => async (dispatch, getState) => {\r\n    \r\n    // const state = getState()// אם רוצים לקבל מידע מהרידקס כדי לשלוח לקריאת שרת\r\n    try{\r\n    let response = await addTrackApi(track,token);\r\n    if(response.status===401){\r\n        const state=getState()\r\n        Login(state.user!.user!.mail)        \r\n         response = await addTrackApi(track,localStorage.getItem('user')!);\r\n    }\r\n    const newTrack=response.data\r\n    dispatch(addTrackAction(newTrack))   \r\n    return newTrack;\r\n    }catch(error){\r\n\r\n        alert(\"failed to add\")\r\n        return null;\r\n    }\r\n}\r\nexport const addStop = (stop: Omit<Stop,'id'>,token:string): AppThunk<Track> => async (dispatch, getState) => {\r\n    \r\n    // const state = getState()// אם רוצים לקבל מידע מהרידקס כדי לשלוח לקריאת שרת\r\n    try{\r\n    let response = await addStopApi(stop,token);\r\n    if(response.status===401){\r\n        const state=getState()\r\n        Login(state.user!.user!.mail)        \r\n         response = await addStopApi(stop,localStorage.getItem('user')!);\r\n    }\r\n    const newStop=response.data\r\n    dispatch(addStopAction(newStop))   \r\n    return newStop;\r\n    }catch(error){\r\n\r\n        alert(\"failed to add\")\r\n        return null;\r\n    }\r\n}\r\nexport const addComment=(comment:Omit<Comment,'id'>,token:string):AppThunk<Comment>=>async(dispatch,getState)=>{\r\n    let response=await addCommentApi(comment,token) as Comment\r\n    dispatch(addCommentAction({trackId:response.trackId,comment:response}))\r\n    return response\r\n\r\n}\r\nexport const initComments=(trackId:number,token:string):AppThunk<Comment[]>=>async(dispatch,getState)=>{\r\n    let response=await getCommentsByTrackId(trackId,token) as Comment[]\r\n    response.forEach(value=>{\r\n        dispatch(addCommentAction({trackId:trackId,comment:value}))\r\n    })\r\n    return response\r\n\r\n}\r\n\r\nexport const deleteTrack = (trackId:number,token:string): AppThunk<Track> => async (dispatch, getState) => {\r\n    await deleteTrack(trackId,token!)\r\n         alert(\"delete was successfull\")\r\n         dispatch(DeleteTrackSlice(indexToDelete))\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}